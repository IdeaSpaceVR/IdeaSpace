!function(modules){function __webpack_require__(moduleId){if(installedModules[moduleId])return installedModules[moduleId].exports;var module=installedModules[moduleId]={exports:{},id:moduleId,loaded:!1};return modules[moduleId].call(module.exports,module,module.exports,__webpack_require__),module.loaded=!0,module.exports}var installedModules={};return __webpack_require__.m=modules,__webpack_require__.c=installedModules,__webpack_require__.p="",__webpack_require__(0)}([function(module,exports,__webpack_require__){var vertexShader=__webpack_require__(2),fragmentShader=__webpack_require__(1);AFRAME.registerShader("gradient",{schema:{topColor:{type:"vec3",default:"255 0 0",is:"uniform"},bottomColor:{type:"vec3",default:"0 0 255",is:"uniform"},offset:{type:"float",default:"400",is:"uniform"},exponent:{type:"float",default:"0.6",is:"uniform"}},vertexShader:vertexShader,fragmentShader:fragmentShader}),AFRAME.registerPrimitive("a-gradient-sky",{defaultComponents:{geometry:{primitive:"sphere",radius:5e3,segmentsWidth:64,segmentsHeight:20},material:{shader:"gradient"},scale:"-1 1 1"},mappings:{topColor:"material.topColor",bottomColor:"material.bottomColor",offset:"material.offset",exponent:"material.exponent"}})},function(module,exports){module.exports="uniform vec3 bottomColor;\nuniform vec3 topColor;\nuniform float offset;\nuniform float exponent;\nvarying vec3 vWorldPosition;\n\nvoid main() {\n    float h = normalize( vWorldPosition + offset ).y;\n    float rB = bottomColor.x/255.0;\n    float gB = bottomColor.y/255.0;\n    float bB = bottomColor.z/255.0;\n    vec3 bColor = vec3(rB,gB,bB);\n    float rT = topColor.x/255.0;\n    float gT = topColor.y/255.0;\n    float bT = topColor.z/255.0;\n    vec3 tColor = vec3(rT,gT,bT);\n    gl_FragColor = vec4( mix( bColor, tColor, max( pow( max( h, 0.0 ), exponent ), 0.0 ) ), 1.0 );\n}"},function(module,exports){module.exports="varying vec3 vWorldPosition;\n\nvoid main() {\n\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );\n\tvWorldPosition = worldPosition.xyz;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}"}]);